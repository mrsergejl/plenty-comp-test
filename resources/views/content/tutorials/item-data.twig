{% extends 'PlentyPluginShowcase::templates.ExamplePage' %}

{% block Content %}


    <h1 id="tutorial-roadmap">Item data: tutorial road map</h1>
    <div class="api-docs-basics">
        <p>In this tutorial, you will learn how to create a basic item with variations. In the plentymarkets back end,
            you will find this data in the <b>Item Â» Edit item</b> menu. You will also learn how to retrieve this data.
            Open the <a href="https://developers.plentymarkets.com/rest-doc/item" target="_blank">REST Item</a> page for
            reference where you will find the calls required for item and variation data.</p>

        <p>You can expect to create the following data in this tutorial:</p>

        <ul>
            <li>A category and a subcategory</li>
            <li>An item</li>
            <li>Attributes and attribute values</li>
            <li>Variations</li>
            <li>Item texts</li>
            <li>A sales price that you will link to variations.</li>
            <li>A barcode that you will link to a variation.</li>
        </ul>

        <p>You will also link an existing shipping profile to an item.</p>


        <p>We will also show you how to manage item data and streamline data exchange with external applications using filters and <code>with</code> parameters.</p>

    </div>

    <h1 id="item-structure">What is an item?</h1>
    <div class="api-docs-basics">
        <p>In the plentymarkets item structure, an item is a data container that is composed of global data and at least
            one main variation. The global data applies to all variations and is referred to as item data. We also talk
            about data that is saved and managed "at the item level".</p>

        <p>Item data:</p>
        <ul>
            <li>Global settings (condition, manufacturer, age rating, etc.)</li>
            <li>Texts (names, descriptions, technical data, etc.)</li>
            <li>Properties</li>
            <li>Cross-selling settings</li>
        </ul>

        <p>Every item has a main variation that cannot be deleted. Each item can also have any number of additional
            variations. Data that applies to variations is referred to as variation data. Variation data is managed
            separately for each variation, i.e. "at the variation level". Note that some of this data is managed
            centrally and linked to variations.</p>

        <p>Variation data:</p>
        <ul>
            <li>Images</li>
            <li>Market visibility</li>
            <li>Sales prices</li>
            <li>Barcodes</li>
            <li>Units</li>
            <li>Warehouse</li>
            <li>Stock</li>
            <li>Categories</li>
            <li>Suppliers</li>
        </ul>

        <p>To make plentymarkets even more flexible, some data configurations are managed centrally in the plentymarkets
            settings and then linked to items or variations. The following data is managed centrally:</p>

        <ul>
            <li>Units</li>
            <li>Barcodes</li>
            <li>Sales prices</li>
            <li>Categories</li>
            <li>Suppliers</li>
            <li>Attributes</li>
            <li>Properties</li>
        </ul>

        <p>We will illustrate this later by linking categories, sales prices, attributes and barcodes to the item we
            create.</p>

        <figure>
            <a data-toggle="modal" data-target="#modal1" href="#">
                <img class="img-responsive img-pretty"
                     src="{{ plugin_path('PlentyPluginShowcase') }}/images/tutorials/itemstructure.png"/>
            </a>
        </figure>


    </div>




    <h1 id="variation-structure">What is a variation?</h1>
    <div class="api-docs-basics">
        <p>As the name suggests, variations are different versions of an item. Whereas an item serves as a data
            container, an item's variations are the actual products that customers can purchase in a store and/or on
            markets. The item allows you to group different variations that share similar characteristics. In
            plentymarkets, you can create variations of an item either by specifying different unit/content variations
            or by using attributes:</p>


        <table class="table table-striped table-responsive table-bordered table-hover">
            <thead>
            <tr>
                <th>Variation</th>
                <th>Example</th>
            </tr>
            </thead>

            <tbody>
            <tr>
                <td>Unit/content combinations</td>
                <td>Variations differ in quantity only, e.g.:<br/>
                    <ul>
                        <li>Soap: 100ml, 250ml, 500ml</li>
                        <li>Wine: 1 bottle or 1 dozen bottles</li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Attribute value combinations</td>
                <td>Variations differ in terms of other attribute values, e.g.:<br/>
                    <ul>
                        <li>Sofa: colour (red, black or brown) = one attribute</li>
                        <li>Bed spread: colour (yellow, green); size (single, queen and king) = two attributes</li>
                        <li>Shoes: colour (black, brown); size (5, 6 and 7); width (normal, wide) = three attributes
                        </li>
                    </ul>
                </td>
            </tr>
            </tbody>
        </table>


        <p>If your product portfolio does not contain products with similar characteristics, you do not need to create
            variations. However, remember that in plentymarkets, items are not sellable products. Instead, your product
            will be equivalent to the item's main variation.</p>

        <div class="alert alert-info" role="success">
            <p><b>Tip:</b> If you work with variations, an item's main variation can either be a sellable product of
                your portfolio or it can be virtual. A virtual main variation is used to pass on settings to other
                variations of the item.</p>
        </div>
    </div>



    <h1 id="inheritance">What is inheritance?</h1>
    <div class="api-docs-basics">
        <p>The main variation of an item differs from the item's other variations in that some of its characteristics
            can be passed on to the other variations of the item. As such, you can think of the main variation as a
            parent variation. Inheritance is activated by default, i.e. when you create a new variation, it inherits
            settings from the main variation unless you pass data that differs from that saved for the main variation.
            There are two kinds of inheritance in plentymarkets: some settings are passed on individually, others are
            passed on collectively, i.e. on a 1:n basis.</p>
    </div>


    <h2 id="individual-inheritance">Individual inheritance</h2>
    <div class="api-docs-basics">
        <p>Individual inheritance means that one setting is passed from the main variation to the variation.</p>

        <p>The following data is inherited individually:</p>

        <ul>
            <li>Availability settings</li>
            <li>Dimensions</li>
            <li>Costs</li>
            <li>Shipping information</li>
        </ul>

    </div>

    <h2 id="one-to-n-inheritance">1:n inheritance</h2>
    <div class="api-docs-basics">

        <p>1:n inheritance means that a variation inherits either all or none of the main variation's data set. Before
            we dive into the rules of 1:n inheritance, let's look at the data sets this kind of inheritance applies
            to.</p>

        <p>The following data is inherited as a complete data set, i.e. 1:n:</p>

        <ul>
            <li>Sales prices</li>
            <li>Categories</li>
            <li>Suppliers</li>
            <li>Warehouse</li>
            <li>Markets</li>
            <li>Client availability</li>
        </ul>

        <p>The most important point to remember about 1:n inheritance is that inheritance is deactivated automatically
            if one or more of the values inherited from the main variation is changed or if a value is added to the
            variation.</p>


        <p>Let's illustrate this with the 1:n inheritance of sales prices. Let's assume our main variation has 5 sales
            prices. Because inheritance is 1:n, either all or none of the prices are passed to a variation. This
            means:</p>


        <ul>
            <li>If you save a price for one sales price, inheritance is deactivated for all sales prices. The main
                variation's other prices are saved for the variation but no longer updated if the main variation's
                prices change.
            </li>
            <li>If you activate inheritance for a variation, any prices saved for the variation are deleted and replaced
                by the sales prices and prices of the main variation.
            </li>
        </ul>
    </div>



    <h1 id="creating-an-item">Creating an item record</h1>
    <div class="api-docs-basics">
        <p>This tutorial describes how to create an item in plentymarkets using the REST API. To get started, let's
            define the item we want to create:</p>


        <ul>
            <li>Item = plentymarkets unisex t-shirt
                <ul>
                    <li>Variation 1 = Colour: red; Size: Unisex M; Price: 19.00 Euro; Barcode: 11111111</li>
                    <li>Variation 2 = Colour: red; Size: Unisex L; Price: 19.00 Euro; Barcode: 11111112</li>
                    <li>Variation 3 = Colour: black; Size: Unisex M; Price: 19.00 Euro; Barcode: 11111113</li>
                    <li>Variation 4 = Colour: black; Size: Unisex L; Price: 21.00 Euro; Barcode: 11111114</li>
                </ul>
            </li>
            <li>Category tree = Unisex > T-shirts</li>
            <li>Referrer = Default online store (plentyID <b>1</b>)</li>
        </ul>

        <div class="alert alert-info" role="alert">
            <p>
            <p>Note that the aim of this tutorial is to teach you how to create items and variations in plentymarkets.
                This means that we will create this item with the minimum data required to get us started. As such, the
                item we create will not be ready for market.</p>
        </div>
    </div>


    <h2 id="categories">Step 1: Categories</h2>
    <div class="api-docs-basics">
        <p>Every variation in plentymarkets must be linked to a category of the type <b>Item</b>. As such, when you
            create an item, you also need to specify the category to link to it. If no categories exist in the system,
            you need to create a category before creating the item. When you link an item to a category, this link is
            passed on to all variations. Inheritance of category links is 1:n, i.e. either all or none of the category
            links are passed on from the main variation to the other variations of the item. Because every variation
            must be linked to a category, you need to make sure a category exists in the system and if no category
            exists, create a category.</p>
    </div>



    <h3 id="get-categories">Listing categories</h3>
    <div class="api-docs-basics">
        <p>You can list all categories in the system using the call <code>rest/categories</code>. However, because we
            are only interested in categories of the Item type, we can filter the results of our request using the
            parameter <code>type</code>:</p>

        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/categories?type=item</code>
        </div>

        <p>If you find a suitable category for the item you want to create, take note of the category ID. You will need
            this to create the item. In this tutorial, we will assume that no suitable category exists in the system so
            we can create one from scratch.</p>
    </div>

    <h3 id="post-category">Creating a category of the type Item</h3>
    <div class="api-docs-basics">
        <p>If no suitable category exists, create a category. In this example, we will create a first level category <b>Unisex</b>
            and a subcategory <b>T-shirts</b> so that our variations can be found under <b>Unisex > T-shirts</b> in the
            online store. Categories are created using the following call:</p>


        <div class="route-container" data-type="post" data-middleware="oauth">
            <code>/rest/categories</code>
        </div>

        <p>We will send the following parameters to create the first level category <b>Unisex</b>:</p>


        <p>We need to supply at least the following parameters to create an attribute value:</p>

        <ul>
            <li>The type of the category</li>
            <li>The client (store)</li>
            <li>A name for the category</li>
            <li>The language for which the name is saved</li>
        </ul>

        <p>With this in mind, this is what our request should look like:</p>
    </div>

    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/categories</code>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
    [
        {
            "parentCategoryId": null,
            "type": "item",
            "right": "all",
            "details": [
                {
                    "plentyId": 0,
                    "lang": "en",
                    "name": "Unisex"
                }
            ],
            "clients": [
                {
                    "plentyId": 0
                }
            ]
        }
    ]
</pre>
    </div>

    <div><p>The following response is expected. Note down the ID of this category. We will need it shortly to create a
            subcategory.</p>
    </div>

    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
[
    {
        "id": 399,
        "parentCategoryId": null,
        "level": 1,
        "type": "item",
        "linklist": "N",
        "right": "all",
        "sitemap": "N",
        "details": [
            {
                "categoryId": 399,
                "plentyId": 0,
                "lang": "en",
                "name": "Unisex",
                "description": "",
                "description2": "",
                "shortDescription": "",
                "metaKeywords": "",
                "metaDescription": "",
                "nameUrl": "",
                "metaTitle": "",
                "plenty_category_details_image": null,
                "plenty_category_details_image2": null,
                "position": 0,
                "plenty_category_details_last_update_timestamp": "2017-01-27T15:03:54+01:00",
                "plenty_category_details_last_update_user": " ",
                "itemListView": "ItemViewCategoriesList",
                "singleItemView": "ItemViewSingleItem",
                "pageView": "PageDesignContent",
                "fulltext": "N",
                "placeholderTranslation": "Y",
                "webTemplateExists": "N",
                "metaRobots": "ALL",
                "canonicalLink": "",
                "image": null,
                "image2": null,
                "imageDocument": null,
                "image2Document": null
            }
        ],
        "clients": [
            {
                "plentyId": 0
            }
        ]
    }
]
</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>


    <h3 id="post-subcategory">Creating a subcategory of the type Item</h3>
    <div class="api-docs-basics">
        <p>Now, we will create a subcategory of the category we just created. By specifying the parameter <code>parentCategoryID</code>,
            the category will be created as a sub-category to the category with the ID we specify.</p>


        <div class="route-container" data-type="post" data-middleware="oauth">
            <code>/rest/categories</code>
        </div>


        <p>We will send the following parameters to create the second level category <b>Unisex</b>:</p>


        <ul>
            <li>The type of the category</li>
            <li>The client (store)</li>
            <li>A name for the category</li>
            <li>The language for which the name is saved</li>
            <li>The ID of the parent category</li>
        </ul>

        <p>So our request should look like this:</p>
    </div>


    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/categories</code>
    </div>


    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
  [
    {
        "parentCategoryId": 399,
        "type": "item",
        "right": "all",
        "details": [
            {
                "plentyId": 0,
                "lang": "en",
                "name": "T-shirts"
            }
        ],
        "clients": [
            {
                "plentyId": 0
            }
        ]
    }
  ]
}
</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>



    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
  [
    {
        "id": 400,
        "parentCategoryId": 399,
        "level": 2,
        "type": "item",
        "linklist": "N",
        "right": "all",
        "sitemap": "N",
        "details": [
            {
                "categoryId": 400,
                "plentyId": 0,
                "lang": "en",
                "name": "T-shirts",
                "description": "",
                "description2": "",
                "shortDescription": "",
                "metaKeywords": "",
                "metaDescription": "",
                "nameUrl": "",
                "metaTitle": "",
                "plenty_category_details_image": null,
                "plenty_category_details_image2": null,
                "position": 0,
                "plenty_category_details_last_update_timestamp": "2017-01-27T15:08:23+01:00",
                "plenty_category_details_last_update_user": " ",
                "itemListView": "ItemViewCategoriesList",
                "singleItemView": "ItemViewSingleItem",
                "pageView": "PageDesignContent",
                "fulltext": "N",
                "placeholderTranslation": "Y",
                "webTemplateExists": "N",
                "metaRobots": "ALL",
                "canonicalLink": "",
                "image": null,
                "image2": null,
                "imageDocument": null,
                "image2Document": null
            }
        ],
        "clients": [
            {
                "plentyId": 0
            }
        ]
    }
  ]
}
</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>


    <h2 id="items">Step 2: Item</h2>
    <div class="api-docs-basics">
        <p>Now that you have created a category, you are all set for creating your first item. Remember that an item is
            a data container that in itself does not correspond to a physical product. The item level merely allows you
            to group different variations with similar characteristics. Use the following call to create an item:
        </p>
    </div>

    <h3 id="list-items">Listing items</h3>
    <div class="api-docs-basics">
        <p>We start by checking if there are any items in the system:</p>

        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/items</code>
        </div>

        <p>The expected result is a list of all items saved in the system.</p>

    </div>

    <h3 id="post-item">Creating an item</h3>
    <div class="api-docs-basics">
        <p>Now, let's start and create our first item already! To do so, we need the following call:</p>


        <div class="route-container" data-type="post" data-middleware="oauth">
            <code>/rest/items</code>
        </div>


        <p>As a minimum, we need to supply the following parameters to create an item:</p>

        <ul>
            <li>A category</li>
            <li>A <a href="https://developers.plentymarkets.com/rest-doc/introduction#units" target="_blank">unit</a> to
                be saved for the main variation
            </li>
            <li>Content to be saved for the main variation</li>
        </ul>

        <p>With this in mind, this is what our request should look like:</p>
    </div>


    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items</code>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "variations": [
        {
            "variationCategories": [
                {
                    "categoryId": 400
                }
            ],
            "unit": {
                "unitId": 1,
                "content": 1
            }
        }
    ]
}
</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>



    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "id": 5840127,
    "position": 0,
    "manufacturerId": 0,
    "stockType": 0,
    "storeSpecial": 0,
    "condition": 0,
    "amazonFedas": "",
    "updatedAt": "2017-01-27 15:42:36",
    "free1": null,
    "free2": null,
    "free3": null,
    "free4": null,
    "free5": null,
    "free6": null,
    "free7": 0,
    "free8": 0,
    "free9": 0,
    "free10": 0,
    "free11": 0,
    "free12": 0,
    "free13": 0,
    "free14": 0,
    "free15": 0,
    "free16": 0,
    "free17": 0,
    "free18": 0,
    "free19": 0,
    "free20": 0,
    "customsTariffNumber": "",
    "producingCountryId": 1,
    "revenueAccount": 0,
    "couponRestriction": 0,
    "flagOne": 0,
    "flagTwo": 0,
    "ageRestriction": 0,
    "createdAt": "2017-01-27 15:42:36",
    "amazonProductType": 0,
    "ebayPresetId": null,
    "ebayCategory": null,
    "ebayCategory2": null,
    "ebayStoreCategory": null,
    "ebayStoreCategory2": null,
    "amazonFbaPlatform": 0,
    "feedback": 0,
    "isSubscribable": false,
    "rakutenCategoryId": null,
    "isShippingPackage": false,
    "conditionApi": 0,
    "isSerialNumber": false,
    "isShippableByAmazon": false,
    "ownerId": null,
    "itemType": "default",
    "mainVariationId": 1136,
    "variations": [
        {
            "id": 1136,
            "isMain": true,
            "mainVariationId": null,
            "itemId": 5840127,
            "categoryVariationId": 1136,
            "marketVariationId": 1136,
            "clientVariationId": 1136,
            "salesPriceVariationId": 1136,
            "supplierVariationId": 1136,
            "warehouseVariationId": 1136,
            "position": null,
            "isActive": false,
            "number": "NEW-168",
            "model": null,
            "externalId": null,
            "availability": 1,
            "estimatedAvailableAt": null,
            "purchasePrice": 0,
            "createdAt": "2017-01-27 15:42:36",
            "updatedAt": "2017-01-27 15:42:36",
            "relatedUpdatedAt": "2017-01-27 15:42:36",
            "priceCalculationId": null,
            "picking": "no_single_picking",
            "stockLimitation": 1,
            "isVisibleIfNetStockIsPositive": false,
            "isInvisibleIfNetStockIsNotPositive": false,
            "isAvailableIfNetStockIsPositive": false,
            "isUnavailableIfNetStockIsNotPositive": false,
            "mainWarehouseId": null,
            "maximumOrderQuantity": null,
            "minimumOrderQuantity": null,
            "intervalOrderQuantity": null,
            "availableUntil": null,
            "releasedAt": null,
            "name": "",
            "weightG": 0,
            "weightNetG": 0,
            "widthMM": 0,
            "lengthMM": 0,
            "heightMM": 0,
            "extraShippingCharge1": null,
            "extraShippingCharge2": null,
            "unitsContained": 1,
            "palletTypeId": null,
            "packingUnits": null,
            "packingUnitTypeId": null,
            "transportationCosts": 0,
            "storageCosts": 0,
            "customs": null,
            "operatingCosts": null,
            "vatId": 0,
            "bundleType": null,
            "automaticClientVisibility": 0,
            "isHiddenInCategoryList": false,
            "defaultShippingCosts": null,
            "mayShowUnitPrice": null
        }
    ],
    "texts": []
}
</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>


    <h3 id="get-item">Getting item data</h3>
    <div class="api-docs-basics">
        <p>Use the following route to retrieve the data of an individual item:</p>

        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/items/{itemId}</code>
        </div>
    </div>

    <h4 class="code-title">Expected response</h4>

    <div class="route-container" data-type="get" data-middleware="oauth">
        <code>/rest/items/154332</code>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
 {
     "id": 154332,
     "position": 0,
     "manufacturerId": 0,
     "stockType": 0,
     "storeSpecial": 0,
     "condition": 0,
     "amazonFedas": "",
     "updatedAt": "2017-01-27T16:53:34+01:00",
     "free1": 0,
     "free2": null,
     "free3": null,
     "free4": null,
     "free5": null,
     "free6": null,
     "free7": 0,
     "free8": 0,
     "free9": 0,
     "free10": 0,
     "free11": 0,
     "free12": 0,
     "free13": 0,
     "free14": 0,
     "free15": 0,
     "free16": 0,
     "free17": 0,
     "free18": 0,
     "free19": 0,
     "free20": 0,
     "customsTariffNumber": "",
     "producingCountryId": 1,
     "revenueAccount": 0,
     "couponRestriction": 0,
     "flagOne": 0,
     "flagTwo": 0,
     "ageRestriction": 0,
     "createdAt": "2017-02-14T00:00:00+01:00",
     "amazonProductType": 0,
     "ebayPresetId": null,
     "ebayCategory": null,
     "ebayCategory2": null,
     "ebayStoreCategory": null,
     "ebayStoreCategory2": null,
     "amazonFbaPlatform": 0,
     "feedback": 0,
     "isSubscribable": false,
     "rakutenCategoryId": null,
     "conditionApi": 0,
     "isActive": true,
     "isShippableByAmazon": false,
     "ownerId": null,
     "type": "default",
     "mainVariationId": 1136,
     "texts": []
 }
</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>


    <h2 id="attributes">Step 3: Attributes</h2>
    <div class="api-docs-basics">
        <p>We need to create the following attributes and attribute values to sell our tee in different colours and
            sizes:</p>

        <ul>
            <li>Colour
                <ul>
                    <li>red</li>
                    <li>black</li>
                </ul>
            </li>
            <li>Size
                <ul>
                    <li>Unisex M</li>
                    <li>Unisex L</li>
                </ul>
            </li>
        </ul>

        <p>Attributes and their attribute values are managed centrally. This allows you to use the same attributes for
            more than one item.</p>
    </div>

    <h3 id="list-attributes">Listing attributes</h3>
    <div class="api-docs-basics">
        <p>As a first step, let's check if any attributes exist in the system already that might match our requirements.
            Use the following call to list all attributes:</p>

        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/items/attributes</code>
        </div>

        <p>The expected response is a list of all attributes saved in the system.</p>

    </div>

    <h3 id="post-attribute">Creating attributes</h3>

    <div class="api-docs-basics">
        <p>If no suitable attributes exist, you need to create them before you can start creating variations. In this
            tutorial, we will create the attributes <b>Colour</b> and <b>Size</b>.</p>

        <div class="route-container" data-type="post" data-middleware="oauth">
            <code>/rest/items/attributes</code>
        </div>

        <p>As a minimum, we need to supply the following parameters to create an attribute:</p>

        <ul>
            <li>A back end name</li>
        </ul>

        <p>With this in mind, this is what our request should look like:</p>
    </div>

    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/attributes</code>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "backendName": "Colour"
}
</pre>
    </div>



    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
  {
      "id": 13,
      "backendName": "Colour",
      "position": 0,
      "isSurchargePercental": false,
      "isLinkableToImage": false,
      "amazonAttribute": "",
      "fruugoAttribute": "null",
      "pixmaniaAttribute": 0,
      "ottoAttribute": "none",
      "googleShoppingAttribute": "none",
      "neckermannAtEpAttribute": 0,
      "typeOfSelectionInOnlineStore": "dropdown",
      "laRedouteAttribute": 0,
      "isGroupable": false,
      "updatedAt": "2017-01-27T15:48:39+01:00"
  }
</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>


    <div><p>Now, let's create the attribute <b>Size</b>:</p></div>


    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/attributes</code>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "backendName": "Size"
}
</pre>
    </div>

    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "id": 15,
    "backendName": "Size",
    "position": 0,
    "isSurchargePercental": false,
    "isLinkableToImage": false,
    "amazonAttribute": "",
    "fruugoAttribute": "null",
    "pixmaniaAttribute": 0,
    "ottoAttribute": "none",
    "googleShoppingAttribute": "none",
    "neckermannAtEpAttribute": 0,
    "typeOfSelectionInOnlineStore": "dropdown",
    "laRedouteAttribute": 0,
    "isGroupable": false,
    "updatedAt": "2017-01-27T15:50:29+01:00"
}
</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>


    <h3 id="post-attribute-names">Creating attribute names</h3>

    <div class="api-docs-basics">
        <p>We have now created two attributes. However, we also need to save names for these attributes in order to
            display them in the online store. Use the following call to create an attribute name for the attribute <b>Colour</b>.
        </p>


        <div class="route-container" data-type="post" data-middleware="oauth">
            <code>/rest/items/attributes/{attributeId}/names</code>
        </div>


        <p>As a minimum, we need to supply the following parameters to create an attribute name:</p>

        <ul>
            <li>The name we want to save for the attribute</li>
            <li>The language we want to save the attribute for</li>
        </ul>

        <p>With this in mind, this is what our request should look like:</p>
    </div>

    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/attributes/13/names</code>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "lang": "en",
    "name": "Colour"
}
</pre>
    </div>



    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "attributeId": 13,
    "lang": "en",
    "name": "Colour"
}
</pre>
    </div>

    <p>Now, create an attribute name for the attribute <b>Size</b>:</p>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/attributes/{attributeId}/names</code>
    </div>

    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/attributes/15/names</code>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "lang": "en",
    "name": "Size"
}
</pre>
    </div>


    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "attributeId": 15,
    "lang": "en",
    "name": "Size"
}
</pre>
    </div>

    <h3 id="post-attribute-value">Creating attribute values</h3>

    <div class="api-docs-basics">
        <p>You have created the attributes <b>Colour</b> and <b>Size</b> and saved names for these attributes. Now,
            create attribute values for these attributes.</p>


        <div class="route-container" data-type="post" data-middleware="oauth">
            <code>/rest/items/attributes/{attributeId}/values</code>
        </div>

        <p>As a minimum, we need to supply the following parameters to create an attribute value:</p>

        <ul>
            <li>The ID of the attribute for which we are creating attribute values</li>
            <li>A back end name for the attribute value</li>
        </ul>

        <p>With this in mind, this is what our request should look like:</p>
    </div>

    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/attributes/13/values</code>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "attributeId": 13,
    "backendName": "Black"
}
</pre>
    </div>


    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "id": 14,
    "attributeId": 13,
    "backendName": "Black",
    "position": 0,
    "image": "",
    "comment": "",
    "amazonValue": "",
    "ottoValue": "",
    "neckermannAtEpValue": "",
    "laRedouteValue": "none",
    "tracdelightValue": "",
    "percentageDistribution": 0,
    "updatedAt": "2017-01-27T11:14:42+01:00"
}
</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>

    <div><p>Now, create the attribute value <b>Red</b>:</p>


        <div class="route-container" data-type="post" data-middleware="oauth">
            <code>/rest/items/attributes/{attributeId}/values</code>
        </div>
    </div>

    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/attributes/13/values</code>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "attributeId": 13,
    "backendName": "Red"
}
</pre>
    </div>



    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "id": 16,
    "attributeId": 13,
    "backendName": "Red",
    "position": 0,
    "image": "",
    "comment": "",
    "amazonValue": "",
    "ottoValue": "",
    "neckermannAtEpValue": "",
    "laRedouteValue": "none",
    "tracdelightValue": "",
    "percentageDistribution": 0,
    "updatedAt": "2017-01-27T11:14:42+01:00"
}
</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>

    <div><p>Go ahead and create the attribute values <b>Unisex M</b> and <b>Unisex L</b> for the attribute <b>Size</b>
            by following the examples supplied above.</p></div>

    <h3 id="post-attribute-value-name">Creating attribute value names</h3>

    <div class="api-docs-basics">
        <p>Next, let's give our attribute values some names for the online store. First, save a name for the attribute
            value with the back end name <b>Red</b>.</p>


        <div class="route-container" data-type="post" data-middleware="oauth">
            <code>/rest/items/attribute_values/{valueId}/names</code>
        </div>


        <p>As a minimum, we need to supply the following parameters to create an attribute value name:</p>

        <ul>
            <li>The name we want to save for the attribute value</li>
            <li>The language we want to save the attribute value for</li>
        </ul>

        <p>With this in mind, this is what our request should look like:</p>
    </div>

    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/attribute_values/16/names</code>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "valueId": 16,
    "lang": "en",
    "name": "Red"
}
</pre>
    </div>


    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "lang": "en",
    "valueId": 16,
    "name": "Red"
}
</pre>
    </div>

    <div><p>Now, save a name for the attribute value with the back end name <b>Black</b>.</p></div>

    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/attribute_values/14/names</code>
    </div>


    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "valueId": 14,
    "lang": "en",
    "name": "Black"
}
</pre>
    </div>


    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "lang": "en",
    "valueId": 14,
    "name": "Black"
}
</pre>
    </div>

    <div><p>Go ahead and also save names for the attribute values <b>Unisex M</b> and <b>Unisex L</b>.</p></div>

    <h3 id="get-attributes">Getting attribute data</h3>

    <div class="api-docs-basics">
        <p>We have created two attributes and four attribute values. To illustrate what happens in the system, let's get
            the data saved for our attribute <b>Colour</b> (attributeId = 13).</p>


        <h4 class="code-title">Expected response</h4>

        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/items/attributes/13/values</code>
        </div>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "page": 1,
    "totalsCount": 2,
    "isLastPage": true,
    "entries": [
        {
            "id": 14,
            "attributeId": 13,
            "backendName": "Black",
            "position": 0,
            "image": "",
            "comment": "",
            "amazonValue": "",
            "ottoValue": "",
            "neckermannAtEpValue": "",
            "laRedouteValue": "",
            "tracdelightValue": "",
            "percentageDistribution": 0,
            "updatedAt": "2017-01-27T16:50:22+01:00"
        },
        {
            "id": 16,
            "attributeId": 13,
            "backendName": "Red",
            "position": 0,
            "image": "",
            "comment": "",
            "amazonValue": "",
            "ottoValue": "",
            "neckermannAtEpValue": "",
            "laRedouteValue": "",
            "tracdelightValue": "",
            "percentageDistribution": 0,
            "updatedAt": "2017-01-27T16:54:35+01:00"
        }
    ]
}</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>



    <h2 id="variations">Step 4: Variations</h2>
    <div class="api-docs-basics">
        <p>You now have saved all the data you need to create one or several variations for our item. Mathematically,
            the combination of 2 sizes and 2 colours results in a total of 4 possible variations. Because the main
            variation can either be virtual or one of these possible combinations, our item can either have 5 or 4
            variations in total. In this example, we will treat the main variation as virtual, i.e. it cannot be
            purchased. This means that we are going to create 4 variations.</p>

        <ul>
            <li>red/Unisex M</li>
            <li>red/Unisex L</li>
            <li>black/Unisex M</li>
            <li>black/Unisex L</li>
        </ul>
    </div>

    <h3 id="list-variation">Listing variations</h3>
    <div class="api-docs-basics">

        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/items/{itemId}/variations</code>
        </div>

        <p>The item we created already has a main variation. So take a minute to list the main variation data saved for
            our item.
        </p>
    </div>


    <h4 class="code-title">Expected response</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/154332/variations</code>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "page": 1,
    "totalsCount": 1,
    "isLastPage": true,
    "entries": [
        {
            "id": 1136,
            "isMain": true,
            "mainVariationId": null,
            "itemId": 154332,
            "categoryVariationId": 1136,
            "marketVariationId": 1136,
            "clientVariationId": 1136,
            "salesPriceVariationId": 1136,
            "supplierVariationId": 1136,
            "warehouseVariationId": 1136,
            "position": null,
            "isActive": false,
            "number": "NEW-168",
            "model": "",
            "externalId": "",
            "availability": 1,
            "estimatedAvailableAt": null,
            "purchasePrice": 0,
            "createdAt": "2017-01-27T15:42:36+01:00",
            "updatedAt": "2017-01-27T14:15:42+01:00",
            "relatedUpdatedAt": "2017-01-27T14:18:24+01:00",
            "priceCalculationId": null,
            "picking": "no_single_picking",
            "stockLimitation": 1,
            "isVisibleIfNetStockIsPositive": false,
            "isInvisibleIfNetStockIsNotPositive": false,
            "isAvailableIfNetStockIsPositive": false,
            "isUnavailableIfNetStockIsNotPositive": false,
            "mainWarehouseId": 1,
            "maximumOrderQuantity": null,
            "minimumOrderQuantity": null,
            "intervalOrderQuantity": null,
            "availableUntil": null,
            "releasedAt": null,
            "name": "",
            "weightG": 0,
            "weightNetG": 0,
            "widthMM": 0,
            "lengthMM": 0,
            "heightMM": 0,
            "extraShippingCharge1": null,
            "extraShippingCharge2": null,
            "unitsContained": 1,
            "palletTypeId": null,
            "packingUnits": null,
            "packingUnitTypeId": null,
            "transportationCosts": 0,
            "storageCosts": 0,
            "customs": null,
            "operatingCosts": null,
            "vatId": 0,
            "bundleType": null,
            "automaticClientVisibility": 0,
            "isHiddenInCategoryList": false,
            "plenty_item_variation_base_default_shipping_costs": null
        }
    ]
}
</pre>
    </div>



    <h3 id="post-variation">Creating a variation</h3>
    <div class="api-docs-basics">
        <p>Now, let's create our first variation: A <b>red</b> tee in size <b>Unisex M</b> to be sold in the default
            store (ID 1).
        </p>

        <div class="route-container" data-type="post" data-middleware="oauth">
            <code>/rest/items/{itemId}/variations</code>
        </div>

        <p>We need to supply the following parameters:</p>

        <ul>
            <li>The ID of the item</li>
            <li>A unit</li>
            <li>A content</li>
            <li>One or more attribute values</li>
            <li>The client (store)</li>
        </ul>

        <p>As such, this is what our request should look like:</p>
    </div>



    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/154332/variations</code>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "itemId": 154332,
    "unit": {
        "unitId": 1,
        "content": 1
    },
    "variationAttributeValues": [
        {
            "valueId": 15
        },
        {
            "valueId": 14
        }
    ],
    "variationClients": [
        {
            "plentyId": 1
        }
    ]
}
</pre>
    </div>

    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "itemId": "154332",
    "variationAttributeValues": [
        {
            "valueId": 15
        },
        {
            "valueId": 14
        }
    ],
    "plentyMarkets": "rest/items/154332/variations",
    "unitId": 1,
    "content": 1,
    "attributeValueSetId": 25,
    "createdTimestamp": "2017-01-27 09:24:29",
    "primaryVariationId": 1136,
    "customNumber": "NEW-169",
    "unitCombinationId": 12,
    "id": 1137
}
</pre>
    </div>

    <div><p>Now, create the other three variations you need. Remember, in addition to the variation you just created,
            you also need the following attribute value combinations:</p>

        <ul>
            <li>red/Unisex L</li>
            <li>black/Unisex M</li>
            <li>black/Unisex L</li>
        </ul>
    </div>


    <h2 id="item-texts">Step 5: Item texts</h2>
    <div class="api-docs-basics">
        <p>You have now created an item and added variations. To offer it in your online store, you should also save a
            name and a description for your variations. The route structure suggests that item texts are saved for
            individual variations. However, at the moment, item texts are still managed at the item level. This means
            that the texts you post will be saved for all variations of the item.
        </p>
    </div>

    <h3 id="post-item-texts">Creating item texts</h3>

    <div class="api-docs-basics">
        <div class="route-container" data-type="post" data-middleware="oauth">
            <code>/rest/items/{id}/variations/{variationId}/descriptions</code>
        </div>

        <p>The following parameters are required to create item texts:</p>

        <ul>
            <li>The ID of the item</li>
            <li>A name</li>
            <li>A description</li>
            <li>The language for which name and descriptions are to be saved.</li>
        </ul>

        <p>So, let's see what our request should look like:</p>
    </div>

    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/154332/variations/1136/descriptions</code>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "lang": "en",
    "name": "Unisex plentymarkets tee",
    "description": "This casual statement tee will help you rock your e-commerce. Eat, sleep, plentymarkets!"
}
</pre>
    </div>

    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "id": 155,
    "itemId": 154328,
    "lang": "en",
    "name": "Unisex plentymarkets tee",
    "name2": "",
    "name3": "",
    "previewDescription": "",
    "metaDescription": "",
    "description": "This casual statement tee will help you rock your e-commerce. Eat, sleep, plentymarkets!",
    "technicalData": "",
    "urlPath": "Unisex-plentymarkets-tee",
    "character_cache": "",
    "character_update": 0,
    "character_cache_xml": "",
    "metaKeywords": ""
}
</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>

    <h3 id="get-item-texts">Getting item texts</h3>
    <div class="api-docs-basics">
        <p>You can retrieve the texts saved for an item texts with the following REST call:</p>

        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/items/{id}/variations/{variationId}/descriptions</code>
        </div>

        <p>Now, check out our awesome item texts with the following route:</p>

        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/items/154332/variations/1136/descriptions</code>
        </div>
    </div>


    <h2 id="images">Step 6: Item images</h2>
    <div class="api-docs-basics">
        <p>Item images are not mandatory, but of course your customers will want to see your wares before ordering. Item
            images are uploaded to the item level and then linked to one or more variations of the item. In this
            tutorial, we will upload one image of out tee in red and then link it to the variation.
        </p>
    </div>

    <h3 id="post-item-image">Uploading an item image</h3>
    <div class="api-docs-basics">
        <p>To upload an item image, you can either specify a URL at which the image can be accessed for uploading or a
            combination of the file name and the base64 encoded image data of the image. In this tutorial, we will
            assume that the image we want to use is already online.</p>

        <div class="route-container" data-type="post" data-middleware="oauth">
            <code>/rest/items/{id}/images/upload</code>
        </div>

        <p>Some parameters are required to upload an item image:</p>

        <ul>
            <li>Either the URL or the item data</li>
            <li>A name</li>
            <li>The language in which the name is to be saved</li>
            <li>A client (store)</li>
        </ul>

        <p>So we will post this request:</p>
    </div>

    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/154332/images/upload</code>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "uploadUrl": "http://your_store.com/item/images/plenty-tee-red.jpg",
    "names": [
        {
            "lang": "en",
            "name": "Red plentymarkets tee"
        }
    ],
    "availabilities": [
        {
            "type": "mandant",
            "value": 1
        }
    ]
}
</pre>
    </div>



    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "id": 67,
    "itemId": 154328,
    "type": "internal",
    "fileType": "jpeg",
    "path": "S3:154328:plenty-tee-red.jpg",
    "position": 0,
    "lastUpdate": "2017-01-27 17:08:03",
    "insert": "2017-01-27 17:08:01",
    "md5Checksum": "075691560e5780367e4e73198a4332c4",
    "width": 590,
    "height": 459,
    "size": 36781,
    "storageProviderId": "2",
    "cleanImageName": "http-www-plenty-tee-red.jpg",
    "url": "http://your_store.com/item/images/154328/3000x3000/plenty-tee-red.jpg",
    "urlMiddle": "http://your_store.com/item/images/154328/370x450/plenty-tee-red.jpg",
    "urlPreview": "http://your_store.com/item/images/154328/150x150/plenty-tee-red.jpg",
    "urlSecondPreview": "http://your_store.com/item/images/154328/10x10/plenty-tee-red.jpg",
    "documentUploadPath": "item/images/154328/3000x3000/plenty-tee-red.jpg",
    "documentUploadPathPreview": "item/images/154328/150x150/plenty-tee-red.jpg",
    "documentUploadPreviewWidth": 150,
    "documentUploadPreviewHeight": 150,
    "availabilities": [
        {
            "imageId": 67,
            "type": "mandant",
            "value": 0
        }
    ],
    "names": [
        {
            "lang": "en",
            "name": "Red plentymarkets tee"
        }
    ]
}
</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>

    <div><p>Jot down the image ID. You will need the ID in the next step when you will link the image to a
            variation.</p></div>


    <h3 id="post-image-link">Linking item image to a variation</h3>
    <div class="api-docs-basics">
        <p>Once you have uploaded the item image, you link it to one or more variations to be visible in the online
            store. In this case, we will link the image to the variation with the attribute value combination <b>red/Unisex
                M</b>.</p>

        <div class="route-container" data-type="post" data-middleware="oauth">
            <code>/rest/items/{id}/variations/{variationId}/variation_images</code>
        </div>

        <p>We need to specify at least the following parameters:</p>

        <ul>
            <li>The ID of the item</li>
            <li>The ID of the variation</li>
            <li>The ID of the image</li>
        </ul>

        <p>We should post this request:</p>
    </div>

    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/154332/variations/1137/variation_images</code>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "imageId": 67
}
</pre>
    </div>



    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "id": 21,
    "itemId": 154332,
    "variationId": 1131,
    "imageId": 67,
    "createdAt": "2017-01-27T09:25:27+01:00",
    "updatedAt": "2017-01-27T09:25:27+01:00"
}
</pre>
    </div>

    <div><p>The image is now activated for the variation and will be used to illustrate this variation in the online
            store.</p></div>

    <h2 id="related-data">Step 7: Related data</h2>
    <div class="api-docs-basics">
        <p>We have now created an item and added several variations. However, to sell these variations in the online
            store, we need to save additional data. As specified earlier, some data in plentymarkets is managed
            centrally and linked to individual items or variations. In this part of the tutorial, we will link the
            following data to our variations:</p>

        <ul>
            <li>Shipping profile</li>
            <li>Sales price</li>
            <li>Barcode</li>
        </ul>

    </div>


    <h3 id="shipping-profile">Shipping profiles</h3>
    <div class="api-docs-basics">
        <p>To make sure shipping costs are calculated correctly, you need to link at least one shipping profile to every
            item. To find out more about shipping profiles, check the plentymarkets <a
                    href=" https://www.plentymarkets.co.uk/manual/fulfilment/preparing-the-shipment/">manual</a>.</p>
    </div>


    <h4 id="list-shipping-profiles">Listing shipping profiles</h4>
    <div class="api-docs-basics">

        <p>First, get a list of all shipping profiles:</p>

        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/orders/shipping/presets</code>
        </div>

        <p>The expected response is a list of all shipping profiles saved in the system.</p>

    </div>

    <h4 id="post-shipping-profile-link">Linking a shipping profile to the item</h4>
    <div class="api-docs-basics">

        <div class="route-container" data-type="post" data-middleware="oauth">
            <code>/rest/items/{id}/item_shipping_profiles</code>
        </div>

        <p>Instead of creating a shipping profile, we will assume that a suitable profile already exists. Let's say it
            has the ID 6. So we need to specify the ID of the item and the ID of the shipping profile:</p>
    </div>

    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/154332/item_shipping_profiles</code>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "profileId": 6
}
</pre>
    </div>

    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
			<pre class="prettyprint lang-js grey-back linenums code-example">
			{
			    "itemId": 154332,
			    "profileId": 8,
			    "id": 39
			}
			</pre>
    </div>



    <div><p>The shipping profile is now linked to the item. Because the shipping profile is linked at the item level, it
            is applied to all variations of the item.</p></div>


    <h3 id="sales-prices">Sales prices</h3>
    <div class="api-docs-basics">
        <p>We are getting closer to actually selling our tees in our store. But so far, our variations do not have a
            price. Sales prices are defined centrally and linked to variations. The actual price is saved on the
            variation level. This allows you to manage recurring settings centrally, e.g. referrers, countries, clients,
            etc. As such, a sales price can be described as a combination of settings and conditions under which a
            variation is sold at a particular price. By contrast, the price is the actual amount of money at which the
            variation is sold at when the conditions of the sales price are met.</p>
    </div>

    <h4 id="list-sales-prices">Listing sales prices</h4>
    <div class="api-docs-basics">

        <p>Start off by checking if any of the existing sales prices fit your needs. Use the following call to list all
            sales prices in the system.</p>

        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/items/sales_prices</code>
        </div>
    </div>

    <h4 id="post-sales-price">Creating a sales price</h4>
    <div class="api-docs-basics">

        <div class="route-container" data-type="post" data-middleware="oauth">
            <code>/rest/items/sales_prices</code>
        </div>

        <p>Now, we will create a sales price.</p>

    </div>


    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/sales_prices</code>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
    {
        "position": 6,
        "minimumOrderQuantity": 1,
        "type": "default",
        "isCustomerPrice": false,
        "isDisplayedByDefault": true,
        "isLiveConversion": false,
        "names": [
            {
                "lang": "en",
                "nameInternal": "Default store",
                "nameExternal": "Our price"
            }
        ],
        "countries": [
            {
                "countryId": 12
            }
        ],
        "currencies": [
            {
                "currency": "EUR"
            }
        ],
        "customerClasses": [
            {
                "customerClassId": -1
            }
        ],
        "referrers": [
            {
                "referrerId": 0
            },
            {
                "referrerId": 1
            }
        ],
        "clients": [
            {
                "priceId": 8,
                "plentyId": -1
            }
        ]
    }
</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>

    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "id": 9,
    "position": 6,
    "minimumOrderQuantity": 1,
    "type": "default",
    "isCustomerPrice": false,
    "isDisplayedByDefault": true,
    "isLiveConversion": false,
    "createdAt": "0000-00-00 00:00:00",
    "updatedAt": "2017-01-27 16:57:27",
    "names": [
        {
            "priceId": 9,
            "lang": "en",
            "nameInternal": "Default store",
            "nameExternal": "Our price",
            "createdAt": null,
            "updatedAt": "2017-01-27T16:57:27+01:00"
        }
    ],
    "accounts": [],
    "countries": [
        {
            "priceId": 9,
            "countryId": 12,
            "createdAt": "2017-01-27T16:57:27+01:00",
            "updatedAt": "2017-01-27T16:57:27+01:00"
        }
    ],
    "currencies": [
        {
            "priceId": 9,
            "currency": "EUR",
            "createdAt": "2017-01-27T16:57:27+01:00",
            "updatedAt": "2017-01-27T16:57:27+01:00"
        }
    ],
    "customerClasses": [
        {
            "priceId": 9,
            "customerClassId": -1,
            "createdAt": "2017-01-27T16:57:27+01:00",
            "updatedAt": "2017-01-27T16:57:27+01:00"
        }
    ],
    "referrers": [
        {
            "priceId": 9,
            "referrerId": 0,
            "createdAt": "2017-01-27T16:57:27+01:00",
            "updatedAt": "2017-01-27T16:57:27+01:00"
        },
        {
            "priceId": 9,
            "referrerId": 1,
            "createdAt": "2017-01-27T16:57:27+01:00",
            "updatedAt": "2017-01-27T16:57:27+01:00"
        }
    ],
    "clients": [
        {
            "priceId": 9,
            "plentyId": -1,
            "createdAt": "2017-01-27T16:57:27+01:00",
            "updatedAt": "2017-01-27T16:57:27+01:00"
        }
    ]
}
</pre>
        <button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
    </div>

    <div><p>The sales price is now saved in the system and you can link it to the item. To do so, first write down the
            sales price ID (in our case, this is ID 9).</p></div>

    <h4 id="get-sales-price">Linking sales price and save a price</h4>
    <div class="api-docs-basics">

        <div class="route-container" data-type="post" data-middleware="oauth">
            <code>/rest/items/{id}/variations/{variationId}/variation_sales_prices</code>
        </div>


        <p>As stated, sales prices are linked to an item at the variation level. As such, you can assign different sales
            prices to different variations of an item. If you want to work with the inheritance feature for this data,
            note that inheritance is 1:n. This means that you can only pass either all or no sales prices from the main
            variation to another variation of the item.</p>


        <p>We want to link this sales price to our main variation so that the price is passed on to all the item's
            variation for which inheritance is active. We will need to post the following parameters:</p>

        <ul>
            <li>The ID of the variation</li>
            <li>The ID of the sales price</li>
            <li>The price</li>
        </ul>

        <p>So our request should look like this:</p>
    </div>


    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/154332/variations/1136/variation_sales_prices</code>
    </div>


    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "variationId": 1136,
    "salesPriceId": 9,
    "price": "19.00"
}
</pre>
    </div>


    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "variationId": 1136,
    "salesPriceId": 9,
    "price": 19,
    "updatedAt": "2017-01-27T16:59:46+01:00",
    "createdAt": "2017-01-27T16:59:46+01:00"
}
</pre>
    </div>

    <div><p>Note that at this stage inheritance is active for all our variations. As such, the combination of sales
            price and price is passed on to all variations of the item.</p></div>


    <h4 id="posting-different-sales-price">Posting a price for another variation</h4>
    <div class="api-docs-basics">

        <div class="route-container" data-type="post" data-middleware="oauth">
            <code>/rest/items/{id}/variations/{variationId}/variation_sales_prices</code>
        </div>

        <p>We specified earlier that we want variation 4 with the attribute combination black/Unisex L to be more
            expensive that the other variations of the item. To take account of this fact, we need to save a different
            price for this variation.</p>

        <p>So assuming this variation has the ID 1140, our request should look like this. Remember that no price data is
            saved for the variation due to active inheritance. As such, we need to POST the price data.</p>
    </div>


    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/154332/variations/1140/variation_sales_prices</code>
    </div>


    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "variationId": 1140,
    "salesPriceId": 9,
    "price": "21.00"
}
</pre>
    </div>



    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "variationId": 1140,
    "salesPriceId": 9,
    "price": 21,
    "updatedAt": "2017-01-27T16:59:46+01:00",
    "createdAt": "2017-01-27T16:59:46+01:00"
}
</pre>
    </div>


    <div><p>By posting a different price for the variation, inheritance of all sales prices is deactivated for this
            variation. If other sales prices are linked to the variation, the main variation's prices are copied for
            this variation.</p></div>

    <h4 id="get-sales-price-data">Getting variation sales price data</h4>
    <div class="api-docs-basics">
        <p>Now, retrieve the sales price data linked to our main variation. You can do this either with the route
            'Variation SalesPrices' or with the route 'Item variation' combined with the parameter
            <code>salesPrices</code>:</p>


        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/items/154332/variations/1136/variation_sales_prices</code>
        </div>

        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/items/154332/variations/1136?with=variationSalesPrices</code>
        </div>

        <p>You can also list the variation sales price data for all variations of the item:</p>

        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/items/154332/variations?with=variationSalesPrices</code>
        </div>
    </div>


    <h3 id="barcodes">Barcodes</h3>
    <div class="api-docs-basics">
        <p>Barcodes such as GTIN, ISBN, UPC and QR are used to identify items in plentymarkets and on markets. Barcodes
            are created centrally and then linked to a variation to save the code.</p>

        <p>The following barcode types are supported in plentymarkets:</p>
        <ul>
            <li>GTIN 8; GTIN 13; GTIN 14; GTIN 128 = The Global Trade Item Number (formerly European Article Number,
                EAN) is a product barcode for items. The GTIN consists of 8, 13, 14 or 128 characters and is
                administered centrally and issued for manufacturers upon request.
            </li>
            <li>ISBN = The International Standard Book Number is a unique number of 10 or 13 characters to register
                books and other independent, discontinuous publications like multimedia products or software.
            </li>
            <li>QR = Quick Response Code. The code contains data such as the version, the data format and other
                information.
            </li>
            <li>CODE 128 = Alphanumeric barcode. The Code128 consists of start character, encoded data, check character
                and stop character.
            </li>
            <li>UPC = The Universal Product Code is a product barcode for items. The UPC is a 12-digit number. By adding
                a leading <b>0</b>, this barcode can be used as a 13-digit GTIN.
            </li>
        </ul>
        <p>For this tutorial, we will create an 8-digit GTIN barcode and link it to our variations to save GTIN-Codes
            for our variations.</p>
    </div>

    <h4 id="list-barcodes">Listing barcodes</h4>
    <div class="api-docs-basics">

        <p>First, check for barcodes already in the system:</p>

        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/items/barcodes</code>
        </div>
    </div>

    <p>The expected response is a list of all barcodes saved in the system.</p>

    <h4 id="post-barcode">Creating a barcode</h4>
    <div class="api-docs-basics">

        <div class="route-container" data-type="post" data-middleware="oauth">
            <code>/rest/items/barcodes</code>
        </div>

        <p>Now, we will create an 8-digit GTIN for the default store. We need to post the following parameters:</p>

        <ul>
            <li>A name for the barcode</li>
            <li>The type of barcode to be created</li>
            <li>The client (store)</li>
        </ul>

        <p>So this is what our request should look like:</p>
    </div>


    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/barcodes</code>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "name": "GTIN8 store",
    "type": "GTIN_8",
    "referrers": [
        {
            "referrerId": 1
        }
    ]
}
</pre>
    </div>


    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "id": 25,
    "name": "GTIN8 store",
    "type": "GTIN_8",
    "referrers": [
        {
            "barcodeId": 25,
            "referrerId": 1,
            "createdAt": "2017-01-27T12:52:45+01:00",
            "updatedAt": "2017-01-27T12:52:45+01:00"
        }
    ]
}
</pre>
    </div>

    <div><p>The barcode has now been created and is ready to be linked to our variations. Jot down the barcode ID to get
            ready for the next step.</p></div>


    <h4 id="post-barcode-link">Linking barcode to variation and saving a code</h4>
    <div class="api-docs-basics">
        <div class="route-container" data-type="post" data-middleware="oauth">
            <code>/rest/items/{id}/variations/{variationId}/variation_barcodes</code>
        </div>

        <p>Now you have created the barcode, you can link this barcode to a variation and save a code. All you need is
            the barcode ID and the barcode code:</p>

    </div>


    <h4 class="code-title">Request</h4>

    <div class="route-container" data-type="post" data-middleware="oauth">
        <code>/rest/items/154328/variations/1130/variation_barcodes</code>
    </div>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "barcodeId": 25,
    "code": 11111111
}
</pre>
    </div>


    <h4 class="code-title">Expected response</h4>

    <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "barcodeId": 25,
    "variationId": 1130,
    "code": "11111111",
    "createdAt": "2017-01-27T16:38:15+01:00"
}
</pre>
    </div>

    <h1 id="managing-item-data">Managing item data</h1>
    <div class="api-docs-basics">
        <p>Congratulations! You have now created your first item in plentymarkets. If you want, you can open the <b>Item
                Â» Edit item</b> of your plentymarkets back end and look at it in all its glory. But you can also update,
            search and filter the item data using the plentymarkets REST API. You will find details on the different
            methods and parameters in the REST documentation, but we will give you a quick tour to get you started here.
        </p>
    </div>

    <h2 id="updating-item-data">Updating item data</h2>
    <div class="api-docs-basics">

        <p>As we said earlier, our variations are not ready for market. As such, you still need to add more information.
            For that, you use the PUT methods of the item and variation routes. To illustrate, let's assume for a moment
            that you have saved all the data you need to publish the variations in your online store. If you want to
            start selling your variations, you need to change the <code>isActive</code> parameter value from
            <code>false</code> to <code>true</code>:</p>

        <h4 class="code-title">Request</h4>

        <div class="route-container" data-type="put" data-middleware="oauth">
            <code>/rest/items/154332/variations/1137</code>
        </div>

        <div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "isActive": "true"
}
</pre>
        </div>


        <p><b>Tip:</b> Remember that the main variation we created is not a sellable product. As such, make sure you
            only activate the variations of the item that can be sold.</p>

    </div>


    <h2 id="list-related">Listing related data</h2>
    <div class="api-docs-basics">

        <p>As we have seen, related data is linked to variations using separate variation routes. However, instead of
            listing this data using these separate routes, you can also use the parameter <code>with</code> to retrieve
            related data linked to a variation:</p>


        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/items/{id}/variations/{variationId}?with=</code>
        </div>

        <p>This call will include the related data for a specific variation of an item in the search results. Separate
            more than one parameter by commas.</p>

        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/items/{id}/variations?with=</code>
        </div>


        <p>This call will include the related data for all variations of an item in the search results. Separate more
            than one parameter by commas.</p>


        <p>The following <code>with</code> parameters are available:</p>

        <ul>
            <li><code>variationWarehouses</code> = Lists the warehouse data of the item's variations.</li>
            <li><code>variationSuppliers</code> = Lists the supplier data of the item's variations.</li>
            <li><code>variationDefaultCategory</code> = Lists the default categories of the item's variations.</li>
            <li><code>variationMarkets</code> = Lists the markets linked to the item's variations.</li>
            <li><code>variationClients</code> = Lists the clients (stores) linked to the item's variations.</li>
            <li><code>variationSalesPrices</code> = Lists the sales prices linked to and the prices saved for the item's
                variations.
            </li>
            <li><code>variationBarcodes</code> = Lists the barcodes linked to the item's variations.</li>
            <li><code>variationCategories</code> = Lists the categories linked to the item's variations.</li>
            <li><code>variationAttributeValues</code> = Lists the attribute values of the item's variations.</li>
            <li><code>unit</code> = Lists the units of the item's variations.</li>
            <li><code>parent</code> = Lists the ID of the main variation of the item's variations.</li>
            <li><code>marketItemNumbers</code> = Lists the market item numbers of the item's variations.</li>
            <li><code>item</code> = Lists the item data of the item's variations.</li>
            <li><code>images</code> = Lists the images linked to the item's variations.</li>
            <li><code>stock</code> = Lists the stock data of the item's variations.</li>
        </ul>

        <h4 class="code-title">Example request</h4>

        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/items/154332/variations?with=variationSalesPrices</code>
        </div>

        <p>This call will list the sales prices and prices of our item's variations.</p>

    </div>

    <h2 id="filter-results">Filtering results</h2>
    <div class="api-docs-basics">

        <p>You can limit the number of results of GET methods by applying filter parameters. Check the documentation of
            the individual routes to see which filter parameters are available. To get you started, try the following
            REST call:</p>


        <div class="route-container" data-type="post" data-middleware="oauth">
            <code>/rest/items/variations?isMain=true</code>
        </div>

        <p>This call uses the filter parameter <code>isMain</code> to list only main variations in the system.</p>

    </div>

<h1 id="streamline-data-exchange">Streamlining data exchange with external applications</h1>
<div class="api-docs-basics">
    <p>As we have seen, filters and <code>with</code> parameters allow you to filter results and include relevant related data in the search results. However, filters and parameters also help you to streamline the exchange of item data between plentymarkets and external applications via REST. In other words, you can use filters to set up workflows that allow you to persistently save related data and only get new or updated data before executing processes. To get you started, we will show you how to do this and also provide a list of the calls and filters you need to streamline item data exchange via REST.</p>
</div>


<h2 id="efficient-workflow">Resource efficient data exchange workflow</h2>
<div class="api-docs-basics">

    <p>We have already seen that related data is managed centrally, i.e. independently of items and variations. In other words, related data cannot be retrieved using the item and variation routes. This is because item and variation routes only return information on which configurations are linked to the item or variation and the values saved at the item or variation level. As such, you need to use related data routes to retrieve the configurations that are linked to variations and/or items. This means that to interpreted variation data, you also need to access the configurations saved centrally. The workflow described below shows you how to do this by persistently storing and updating related data efficiently.</p>

    <ol>
        <li>Create a database or JSON files in the external application for persistently storing data.</li>
        <li>GET all related data using the collection routes.</li>
        <li>Save this data persistently in the local application.</li>
        <li>GET all variation data using the collection routes.</li>
        <li>Save this data persistently in the local application.</li>
        <li>GET all item data using the collection route.</li>
        <li>Save this data persistently in the local application.</li>
        <li>Before executing a process in the local application, GET related data filtered with <code>updatedAt</code> filters to persistently store related data updated since last GET calls.</li>
        <li>GET variation data updated since last GET call.</li>
        <li>GET item data updated since last GET call.</li>
        <li>Match the related data to the data stored in the application.</li>
        <li>GET data for IDs that cannot be resolved via the appropriate member routes.</li>
    </ol>


    <p>We recommend that you persistently store the following related data in the external application to exchange item data efficiently:</p>

    <ul>
        <li>Barcode configurations</li>
        <li>Categories</li>
        <li>Sales price configurations</li>
        <li>Properties incl. names</li>
        <li>Properties with value type <b>Selection</b></li>
        <li>Attributes incl. names</li>
        <li>Attribute values incl. names</li>
        <li>Suppliers</li>
        <li>Warehouses</li>
        <li>Manufacturers</li>
        <li>Images</li>
        <li>Units</li>
    </ul>

    <p>We also recommend that you get and save variation and item data persistently and only retrieve updated item and variation data before an application process is started.</p>

</div>



<h2 id="example-workflow">Example workflow: variation sales prices</h2>
<div class="api-docs-basics">




    <p>To illustrate the workflow described above, let's assume we want to exchange sales price data with an external application. The following steps describe the sequence in which data is exchanged.</p>
    </div>

    <h3 id="initial-GET">Step 1: Initial data retrieval</h3>
    <div class="api-docs-basics">

        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/items/sales_prices</code>
        </div>

        <p>GET and persistently store all sales price configuration data in the application.</p>

        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/items/variations?with=variationSalesPrices</code>
        </div>

        <p>GET and persistently store all variation data including links to sales price configurations in the application.</p>


        <div class="route-container" data-type="get" data-middleware="oauth">
            <code>/rest/items</code>
        </div>

        <p>GET and persistently store all item data in the application.</p>
    </div>

        <h3 id="GET-updated-SP">Step 2: Before executing an application process</h3>
        <div class="api-docs-basics">

            <div class="route-container" data-type="get" data-middleware="oauth">
                <code>/rest/items/sales_prices?updatedAt=[timestamp]</code>
            </div>

            <p>GET and persistently save sales price configuration data that was added or updated since last GET method.</p>


            <div class="route-container" data-type="get" data-middleware="oauth">
                <code>/rest/items/variations?with=variationSalesPrices&updatedAt=[timestamp]</code>
            </div>

            <p>GET all variations including links to sales price configurations that were updated on or after the time specified.</p>

        </div>


        <h3 id="iterate-variations">Step 3: Iterating variation data</h3>
        <div class="api-docs-basics">

            <p>The variation data includes the following information about linked sales prices:</p>

            <ul>
                <li>variationId</li>
                <li>salesPriceId</li>
                <li>price</li>
                <li>updatedAt</li>
                <li>createdAt</li>
            </ul>

            <p>When iterating the variation data, the data stored in the application is accessed to retrieve the sales price configuration data.</p>
        </div>


        <h3 id="GET-member-SP">Step 4: Ad hoc retrieval of unknown member resources</h3>
        <div class="api-docs-basics">

            <div class="route-container" data-type="get" data-middleware="oauth">
                <code>/rest/items/sales_prices/{id}</code>
            </div>

            <p>If variations are linked to a sales price ID that is not stored in the external application, use the member route to get this data and persistently save it in the application.</p>
        </div>




    <h2 id="efficient-REST-calls">List of resource efficient REST calls</h2>
    <div class="api-docs-basics">

        <p>
            The following table lists the GET methods that allow you to filter results using <code>updatedAt</code> filters. To help you streamline your workflow even more, the table also provides additional filters and/or <code>with</code> parameters you can use to get collections efficiently. We recommend that you also check the documentation for additional filters that can help you to retrieve only the data you need for your specific use cases.
        </p>



        <div class="alert alert-warning" role="success">
            <p>To use the GET calls listed, you initially need to GET all the data listed and persistently store it in your application. Otherwise, the data created before the <code>updatedAt</code> time specified will be ignored.</p>
        </div>

        <p>Note that the timestamps for <code>updatedAt</code> filters can be specified in the following formats:</p>
        <ul>
            <li>ISO 8601 date and time format, i.e. yyyy-mm-ddThh:mm:ssTZD (e.g. 2017-01-27T16:59:46+01:00)</li>
            <li>Unix timestamp</li>
            <li>PHP function <code>strtotime</code></li>
        </ul>


        <table class="table table-striped table-responsive table-bordered table-hover">
            <thead>
            <tr>
                <th>Data</th>
                <th>GET method</th>
                <th>Description</th>
            </tr>
            </thead>

            <tbody>

            <tr>
                <td colspan="3" class="th"><b>Related data</b></td>
            </tr>
            <tr>
                <td>Categories</td>
                <td><code>/rest/categories?type=item&updatedAt=[timestamp]</code></td>
                <td>Gets all categories of the type <b>Item</b> that were updated on or after the time specified.
            </tr>
            <tr>
                <td>Manufacturers</td>
                <td><code>/rest/items/manufacturers?updatedAt=[timestamp]&with=commissions</code></td>
                <td>Gets all manufacturers including manufacturer commission data that were updated on or after the time specified.</td>
            </tr>
            <tr>
                <td>Properties</td>
                <td><code>/rest/items/properties?updatedAt=[timestamp]&with=names</code></td>
                <td>Gets all properties including property names that were updated on or after the time specified.</td>
            </tr>
            <tr>
                <td>Properties with value type <b>selection</b></td>
                <td><code>/rest/items/properties/{id}/selections?updatedAt=[timestamp]</code></td>
                <td>Gets all properties with value type <b>selection</b> that were updated on or after the time specified.</td>
            </tr>
            <tr>
                <td>Attributes</td>
                <td><code>/rest/items/attributes?updatedAt=[timestamp]&with=names</code></td>
                <td>Gets all attributes including attribute names that were updated on or after the time specified.</td>
            </tr>
            <tr>
                <td>Attribute values</td>
                <td><code>/rest/items/attributes/{attributeId}/values<br />?updatedAt=[timestamp]&with=names</code></td>
                <td>Gets all attribute values including attribute value names that were updated on or after the time specified.</td>
            </tr>
            <tr>
                <td>Barcodes</td>
                <td><code>/rest/items/barcodes?updatedAt=[timestamp]</code></td>
                <td>Gets all barcodes that were updated on or after the time specified.</td>
            </tr>
            <!-- tr>
                <td>Shipping profiles</td>
                <td><code>/rest/orders/shipping/presets?updatedAt=[timestamp]</code></td>
                <td>Gets all shipping profiles that were updated on or after the time specified.</td>
            </tr -->
            <!-- tr>
                <td>Shipping service providers</td>
                <td><code>/rest/orders/shipping/shipping_service_providers<br />?updatedAt=[timestamp]</code></td>
                <td>Gets all shipping service providers that were updated on or after the time specified.</td>
            </tr -->
            <tr>
                <td>Sales prices</td>
                <td><code>/rest/items/sales_prices?updatedAt=[timestamp]</code></td>
                <td>Gets all sales prices that were updated on or after the time specified.</td>
            </tr>
            <tr>
                <td>Supplier</td>
                <td><code>/rest/accounts/contacts?typeId=4&updatedAtAfter=[timestamp]</code></td>
                <td>Gets all contact types with the ID 4, i.e. suppliers, that were updated on or after the time specified.</td>
            </tr>
            <tr>
                <td>Units</td>
                <td><code>/rest/items/units?updatedAt=[timestamp]</code></td>
                <td>Gets all units that were updated on or after the time specified.</td>
            </tr>
            <tr>
                <td>Images</td>
                <td><code>/rest/items/{id}/images?updatedAt=[timestamp]</code></td>
                <td>Gets all images saved for an item that were updated on or after the time specified.</td>
            </tr>
            <tr>
                <td>Warehouses</td>
                <td><code>/rest/stockmanagement/warehouses?updatedAtFrom=[timestamp]</code></td>
                <td>Gets all warehouses that were updated on or after the time specified.</td>
            </tr>
            <!-- tr>
                        <td>Variation stock</td>
                        <td><code>/rest/items/{id}/variations/{variationId}/stock?updatedAtFrom=[timestamp]</code></td>
                        <td>Gets variation stock data that was updated on or after the time specified.</td>
                    </tr -->
            <tr>
                <td colspan="3" class="th"><b>Items</b></td>
            </tr>
            <tr>
                <td>Items</td>
                <td><code>/rest/items?with=variations&updatedBetween=[timestamp]</code></td>
                <td>Gets items that were updated on or after the time specified including variation data.</td>
            </tr>

            </tbody>
        </table>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="modal1" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog img-horizontal" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span
                                aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myModalLabel">plentymarkets item structure</h4>
                </div>
                <div class="modal-body">
                    <figure>
                        <img class="img-responsive"
                             src="{{ plugin_path('PlentyPluginShowcase') }}/images/tutorials/itemstructure.png"/>
                    </figure>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

{% endblock %}
