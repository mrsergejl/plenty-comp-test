{% extends 'PlentyPluginShowcase::templates.ExamplePage' %}

{% block Content %}

<h1 id="introduction">Github webhooks</h1>
<div class="api-docs-basics">
    <p>
        In this tutorial, you learn how to set up webhooks to your Github repositories allowing you to automatically update your plugins in your plentymarkets inbox and provision the plugins in Stage or Productive.
    </p>
</div>

<h2 id="generate-token">Step 1: Generating a personal access token</h2>
<div class="api-docs-basics">
    <p>
        First, go to <a href="https://github.com/settings/tokens" target="_blank">Github</a> and create a new personal access token. This token is used for authenticating your Github account in plentymarkets.
    </p>
    <ol>
        <li>
            Go to <a href="https://github.com/settings/tokens" target="_blank">https://github.com/settings/tokens</a>.
        </li>
        <li>
            Click on <b>Generate new token</b>.
        </li>
        <li>
            Enter a <b>token description</b>, e.g. the plugin name.
        </li>
        <li>
            Under <b>Select scopes</b>, activate <b>repo:status</b> to access the commit status.<br />→ The status is required to inform you about successful or failed provisioning of plugins.
        </li>
        <li>
            Click on <b>Generate token</b>.<br />→ The personal access token will be generated.
        </li>
        <li>
            Click on <b>Copy token</b> to copy the token to the clipboard.<br />→ In the next step, the token will be used instead of your Github password.
        </li>
    </ol>
</div>

<h2 id="add-plugin">Step 2: Adding a plugin</h2>
<div class="api-docs-basics">
    <ol>
        <li>Go to <b>Plugins » Git</b>.</li>
        <li>Click on <b>New plugin</b>.<br /> → The <b>Settings</b> window will open.</li>
        <li>Enter the remote URL of your Github repository.</li>
        <li>Enter your Github user name.</li>
        <li>Paste the copied personal access token into the <b>Password</b> field.</li>
        <li>Click on <b>Test connection</b>.<br /> → The connection to the Github repository is verified and established and a <b>token</b> is generated.</li>
        <li>
          Copy the <b>token</b> to the clipboard.<br /> → This token is required in step 3.
        </li>
        <li>Select the branch of the repository you want to clone.</li>
        <li><b>Save</b> the settings.<br /> → The plugin repository is copied to the plentymarkets inbox.</li>
    </ol>
</div>

<h2 id="setup-webhook">Step 3: Setting up a webhook</h2>
<div class="api-docs-basics">
    <p>
      Now, go to your Github repository and set up a new webhook for the repository.
    </p>
    <ol>
        <li>Go to <a href="https://github.com" target="_blank">Github</a>.</li>
        <li>
          Under <b>Your repositories</b>, click on the plugin repository.<br /> → The <b>Code</b> tab will open.
        </li>
        <li>Click on the <b>Settings</b> tab.</li>
        <li>Click on <b>Webhooks</b>.</li>
        <li>Click on <b>Add webhook</b>.</li>
        <li>Enter the <b>Payload URL</b>.<br /> → The payload URL consists of your online store URL and <code>/rest/plugins/hook</code>, e.g. <code>https://www.your-plentystore.co.uk/rest/plugins/hook</code>.</li>
        <li>Select <b>application/json</b> from the <b>Content type</b> drop-down menu.</li>
        <li>Paste the copied token into the <b>Secret</b> field.<br /> → This token is used for securing the communication between Github and plentymarkets.</li>
        <li>Click on <b>Add webhook</b>.<br /> → The webhook will be displayed under <b>Webhooks</b>.</li>
    </ol>
</div>

<div class="alert alert-info" role="alert">
    <b>Provisioning in Productive:</b> In order to provision the plugin in Productive directly, simply add <code>?mode=production</code> at the end of the payload URL, e.g. <code>https://www.your-plentystore.co.uk/rest/plugins/hook?mode=production</code>.
</div>

<h2 id="provision-plugin">Step 4: Provisioning the plugin</h2>
<div class="api-docs-basics">
    <p>
        You have to provision the plugin manually once to integrate it with plentymarkets.
    </p>
    <ol>
        <li>
            Go to <b>Plugins » Plugin overview</b>.
        </li>
        <li>
            In the row of your plugin, click on <b>Select client</b>.
        </li>
        <li>
            Select your client and save it.
        </li>
        <li>
            Activate the plugin in the <b>Stage</b> or <b>Productive</b> column.
        </li>
        <li>
            In the toolbar, click on <b>Provision plugins in Stage</b> or <b>Provision plugins in Productive</b>.
        </li>
    </ol>
</div>

<h2 id="check-webhook">Step 5: Checking the webhook</h2>
<div class="api-docs-basics">
  <p>
    When making changes to your Github repository and committing the changes, your plugin will be updated automatically and provisioned in Stage or Productive using the webhook. Changes will be visible shortly after the commit.
  </p>
  <ol>
      <li>Go to <a href="https://github.com" target="_blank">Github</a>.</li>
      <li>
        Under <b>Your repositories</b>, click on the plugin repository.<br /> → The <b>Code</b> tab will open.
      </li>
      <li>In the list of <b>Commits</b>, the commit is flagged <b>Pending</b> while provisioning the plugin.<br />→ After a short while, <b>Pending</b> will change to <b>Success</b> if updating and provisioning was successful or to <b>Failure</b> if provisioning failed.</li>
  </ol>
</div>

{% endblock %}
