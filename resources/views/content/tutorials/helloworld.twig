{% extends 'PlentyPluginShowcase::templates.ExamplePage' %}

{% block Content %}

<h1 id="introduction">My first plugin</h1>
<div class="api-docs-basics">
    <p>
        This tutorial is aimed at plentymarkets users who are getting started with plugin development.
        You will only need basic knowledge of creating and editing files in an integrated development environment (IDE) as well as using plentymarkets.<br /><br />
        In six simple steps, we will walk you through creating your first plugin that displays <b>Hello World!</b> in your browser when adding <code>/hello</code> to your domain.
    </p>
</div>

<!-- GitHub button -->
<div class="connect">
    <div class="btn btn-primary btn-block btn-github" title="Clone or download this plentymarkets plugin on GitHub.">
        <a href="https://github.com/plentymarkets/plugin-hello-world" target="_blank" role="button"><img class="img-responsive pull-left" src="{{ plugin_path('PlentyPluginShowcase') }}/images/github-logo.png"  style="width: 40px;"/><span>Download on GitHub</span></a>
    </div>
</div>
<!-- GitHub button end -->

<h2 id="setup-ide">Step 1: Setting up an IDE</h2>
<div class="api-docs-basics">
    <p>
        We recommend using an IDE which supports the PHP language and Twig syntax. To get started, install <b>Atom</b>. It can be extended to support Twig syntax.
    </p>
</div>
<h3 id="install-atom">Installing Atom</h3>
<div class="api-docs-basics">
    <ol>
        <li>
            <a href="https://github.com/atom/atom/releases/latest" target="_blank">Download</a>
            and <a href="http://flight-manual.atom.io/getting-started/sections/installing-atom/" target="_blank">install</a>
            the Atom IDE.
        </li>
        <li>
            <a href="https://atom.io/packages/php-twig" target="_blank">Install the Twig plugin</a><sup>*</sup> for Twig syntax highlighting.
        </li>
    </ol>
    <p>
        *) All required Atom packages can be found in the embedded package control pane of the Atom IDE.
        To access this pane, open the <b>Atom » Preferences</b> menu and click on <b>Install</b>.
    </p>
</div>

<h2 id="setup-git">Step 2: Setting up Git</h2>
<div class="api-docs-basics">
    <p>
        Sign up for a hosting provider for your plugin, e.g. <a href="https://github.com" target="_blank">GitHub</a>.
        You will need the login details when cloning your plugin to your plentymarkets inbox in step 5.
    </p>
</div>
<h3 id="create-repository">Creating a repository</h3>
<div class="api-docs-basics">
    <ol>
        <li>
            Log in to your GitHub account.
        </li>
        <li>
            Click on <b>Create new... » New repository</b>.
        </li>
        <li>
            Enter a repository name.<br />
            &rarr; Name the repository, e.g. <code>HelloWorld</code>.
        </li>
        <li>
            Click on <b>Create repository</b>.<br />
            &rarr; We have now set the basis for our plugin.
        </li>
    </ol>
</div>

<h3 id="install-githubdesktop">Installing GitHub Desktop</h3>
<div class="api-docs-basics">
    <p>
        Install a desktop client for GitHub in order to clone the repository to your local computer.
    </p>
    <ol>
        <li>
            Install <a href="https://desktop.github.com/" target="_blank">GitHub Desktop</a>.
        </li>
        <li>
            Open your <b>HelloWorld</b> repository on GitHub.
        </li>
        <li>
            In the <b>Code</b> tab of your repository, click on <b>Set up in Desktop</b>.
        </li>
        <li>
            Select GitHub Desktop and clone the repository to a location on your hard drive.<br />
            &rarr; We set up the repository clone in our desktop. The folder is still empty, so let's start filling it.
        </li>
    </ol>
</div>

<h2 id="create-components">Step 3: Creating the plugin components</h2>
<div class="api-docs-basics">
    <p>The components of your plugin are the foundation for the communication between the plugin and plentymarkets.
        A <b>ServiceProvider</b> is needed for registering the plugin in plentymarkets.
        A <b>RouteServiceProvider</b> creates and registers the output route.
        And a <b>ContentController</b> renders and displays your content in your template.
    </p>
</div>

<h3 id="create-folders">Creating the folders</h3>
<div class="api-docs-basics">
    <p>
        All plugins need to be organised in a specific structure. We only need the following folders for our plugin. The <b>resources</b> folder can be organised in sub-folders. Here, we save our template. The <b>src</b> folder can also be organised in sub-folders and contains the plugin source code.
    </p>
</div>

<!-- Folder structure -->
<div class="code-container">
<pre class="prettyprint lang-plain grey-back">
HelloWorld/
    ├── resources/
    │   └── views/
    │       └── content/
    │           └── // twig templates (can be organised in sub-folders)
    │
    ├── src/
    │   ├── Providers/
    │   └── Controllers/
    │
    └── plugin.json // plugin information
</pre>
</div>
<!-- Folder structure end -->

<h3 id="create-pluginjson">Creating the plugin.json</h3>
<div class="api-docs-basics">
    <p>
        All information about your plugin is defined in a <code>plugin.json</code> file. This file defines the service
        provider of your plugin, which will be called by plentymarkets to register and run your plugin.
    </p>
    <ol>
        <li>
            Open Atom and click on <b>Add Project Folder</b>.
        </li>
        <li>
            Select your plugin folder and click on <b>Open</b>.
        </li>
        <li>
            Create a new json file in the plugin folder.<br />
            &rarr; Name the file, e.g. <code>plugin.json</code>.
        </li>
        <li>
            Insert the code sample below into the file.
        </li>
        <li>
            Enter your name under <b>author</b> and save the file.
        </li>
    </ol>
</div>

<!-- Code example -->
<div class="route-container">
<code>HelloWorld/plugin.json</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-js grey-back linenums code-example">
{
    "name"              :"HelloWorld",
    "description"       :"My first plugin",
    "namespace"         :"HelloWorld",
    "author"            :"Your name",
    "type"              :"template",
    "serviceProvider"   :null
}
</pre>
<button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
</div>
<!-- Code example end -->

<h3 id="create-serviceprovider">Creating the ServiceProvider</h3>
<div class="api-docs-basics">
    <ol>
        <li>
            Create a new <b>Providers</b> folder in the <b>src</b> folder.
        </li>
        <li>
            Create a new file in the <b>Providers</b> folder.<br />
            &rarr; Name the file, e.g. <code>HelloWorldServiceProvider.php</code>.
        </li>
        <li>
            Insert the code sample below into the file and save it.
        </li>
    </ol>
</div>

<!-- Code example -->
<div class="route-container">
  <code>HelloWorld/src/Providers/HelloWorldServiceProvider.php</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-php grey-back linenums code-example">
&lt;?php

namespace HelloWorld\Providers;


use Plenty\Plugin\ServiceProvider;

class HelloWorldServiceProvider extends ServiceProvider
{

    /**
     * Register the service provider.
     */

    public function register()
    {

    }
}
</pre>
<button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
</div>
<div class="alert alert-info" role="alert">
    <b>Explanation</b>: We recommend that you use the name of the plugin folder as the namespace root.
    This service provider is the central location to register services in the plugin.
</div>
<!-- Code example end -->

<h3 id="create-routeserviceprovider">Creating the RouteServiceProvider</h3>
<div class="api-docs-basics">
    <ol>
        <li>
            Create a new file in the <b>Providers</b> folder.<br />
            &rarr; Name the file, e.g. <code>HelloWorldRouteServiceProvider.php</code>.
        </li>
        <li>
            Insert the code sample below into the file and save it.
        </li>
    </ol>
</div>

<!-- Code example -->
<div class="route-container">
  <code>HelloWorld/src/Providers/HelloWorldRouteServiceProvider.php</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-php grey-back linenums code-example">
&lt;?php

namespace HelloWorld\Providers;


use Plenty\Plugin\RouteServiceProvider;
use Plenty\Plugin\Routing\Router;

class HelloWorldRouteServiceProvider extends RouteServiceProvider
{
    public function map(Router $router)
    {

    }
}
</pre>
<button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
</div>
<!-- Code example end -->

<h3 id="register-routeserviceprovider">Registering the RouteServiceProvider</h3>
<div class="api-docs-basics">
    <p>
        Now we have to register the <b>RouteServiceProvider</b> in the <b>ServiceProvider</b>.
        To do so, add a line in the code of <code>HelloWorldServiceProvider.php</code>.
    </p>
</div>

<!-- Code example -->
<div class="route-container">
  <code>HelloWorld/src/Providers/HelloWorldServiceProvider.php</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-php grey-back linenums code-example">
...

        public function register()
        {
            $this->getApplication()->register(HelloWorldRouteServiceProvider::class);
        }
</pre>
<button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
</div>
<!-- Code example end -->

<h3 id="create-contentcontroller">Creating the ContentController</h3>
<div class="api-docs-basics">
    <ol>
        <li>
            Create a new <b>Controllers</b> folder in the <b>src</b> folder.
        </li>
        <li>
            Create a new file in the <b>Controllers</b> folder.<br />
            &rarr; Name the file, e.g. <code>ContentController.php</code>.
        </li>
        <li>
            Insert the code sample below into the file and save it.
        </li>
    </ol>
</div>

<!-- Code example -->
<div class="route-container">
  <code>HelloWorld/src/Controllers/ContentController.php</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-php grey-back linenums code-example">
&lt;?php

namespace HelloWorld\Controllers;


use Plenty\Plugin\Controller;
use Plenty\Plugin\Templates\Twig;

class ContentController extends Controller
{
    public function sayHello(Twig $twig):string
    {
        return $twig->render('HelloWorld::TEMPLATE');
    }
}
</pre>
<button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
</div>
<div class="alert alert-info" role="alert">
    <b>Explanation</b>: In this code example, we define the <code>sayHello</code> function that renders a twig template. The <code>render</code> method specifies the template location: <code>'PLUGINNAME::TEMPLATE'</code>. Since templates are always saved in the <b>resources/views</b> folder in your plugin, we only have to specify part of the template path. Note that <code>PLUGINNAME</code> is the name of the plugin folder. The name of the plugin folder and the plugin namespace may differ.
</div>
<!-- Code example end -->

<h3 id="map-contentcontroller">Mapping the ContentController</h3>
<div class="api-docs-basics">
    <p>
        Now we have to map the route for the <b>ContentController</b> in the <b>RouteServiceProvider</b>. To do so, add a line in the code.
    </p>
</div>

<!-- Code example -->
<div class="route-container">
  <code>HelloWorld/src/Providers/HelloWorldRouteServiceProvider.php</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-php grey-back linenums code-example">
...

    public function map(Router $router)
    {
        $router->get('hello','HelloWorld\Controllers\ContentController@sayHello');
    }
</pre>
<button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
</div>
<div class="alert alert-info" role="alert">
    <b>Explanation</b>: We use the <code>get</code> method to pass two parameters. The first parameter <code>'hello'</code> defines the route. The second parameter consists of the Fully-Qualified Class Name and the <code>@</code> controller method that is called when the route is called.
</div>
<!-- Code example end -->

<h3 id="create-template">Creating the twig template</h3>
<div class="api-docs-basics">
    <ol>
        <li>
            Create a new <b>content</b> folder in the <b>resources/views</b> folder.
        </li>
        <li>
            Create a new file in the <b>content</b> folder.<br />
            &rarr; Name the file, e.g. <code>hello.twig</code>.
        </li>
        <li>
            Enter the content that you want to display in your browser into this file and save the file.<br />
            &rarr; We simply enter <code>&lt;h1&gt;Hello World!&lt;/h1&gt;</code>.
        </li>
    </ol>
</div>

<h3 id="specify-template">Specifying the template path</h3>
<div class="api-docs-basics">
  <p>
      Here, we have to specify the template path in the <b>ContentController</b>. Simply replace <code>TEMPLATE</code> with the correct path.
  </p>
</div>

<!-- Code example -->
<div class="route-container">
  <code>HelloWorld/src/Controller/ContentController.php</code>
</div>
<div class="code-container">
<pre class="prettyprint lang-php grey-back linenums code-example">
...

    public function sayHello(Twig $twig):string
    {
        return $twig->render('HelloWorld::content.hello');
    }
</pre>
<button type="button" class="btn btn-primary pull-right toggle-code-example">Expand</button>
</div>
<!-- Code example end -->

<h3 id="update-pluginjson">Updating the plugin.json</h3>
<div class="api-docs-basics">
    <ol>
        <li>
            Open the <code>plugin.json</code> file.
        </li>
        <li>
            Enter the value for <b>serviceProvider</b> and save the file.<br />
            &rarr; We enter the namespace of our ServiceProvider. In our case, the namespace is <code>"HelloWorld\\Providers\\HelloWorldServiceProvider"</code>.
        </li>
    </ol>
</div>

<h2 id="update-repository">Step 4: Updating the repository</h2>
<div class="api-docs-basics">
    <p>
        Next, the files in your local <b>HelloWorld</b> folder must be pushed into your Git repository.
    </p>
    <ol>
        <li>
            Open GitHub Desktop.<br />
            &rarr; The plugin files are now visible in GitHub Desktop.
        </li>
        <li>
            Enter a commit message into the <b>Description</b> field.
        </li>
        <li>
            Click on <b>Commit to master</b>.<br />
            &rarr; The changes made to the repository are displayed in the overview.
        </li>
        <li>
            Click on <b>Publish</b>.<br />
            &rarr; Our plugin content is now pushed into the repository on GitHub.
        </li>
        <li>
            Reload the GitHub website to see the changes.
        </li>
    </ol>
</div>

<h2 id="update-plugin">Step 5: Cloning the plugin</h2>
<div class="api-docs-basics">
    <p>
        In this step, you have to clone the Git repository into your plentymarkets inbox. You will need the remote URL from GitHub as well as your login details.
    </p>
    <ol>
        <li>
            Open the plentymarkets back end.
        </li>
        <li>
            Go to <b>Plugins » Git</b>.
        </li>
        <li>Click on <b>Add plugin</b>.<br />
            → The <b>Settings</b> window will open.
        </li>
        <li>
            Enter the remote URL.<br />
            &rarr; You can copy the URL by clicking on <b>Clone or download</b> in the repository on GitHub.
        </li>
        <li>Enter your user name and password.</li>
        <li>Click on <b>Test connection</b>.<br />
            &rarr; Connectivity to the Git repository is checked and established and the drop-down menu <b>Branch</b> can be selected.
        </li>
        <li>Select the branch of the repository that you want to clone and edit.<br />
            &rarr; In our case, <b>Master</b> is set by default.
        </li>
        <li><b>Save</b> the settings.<br />
            → The plugin repository is cloned to the plentymarkets inbox and the plugin is added to the plugin list.
        </li>
    </ol>
</div>

<h2 id="provision-plugin">Step 6: Provisioning the plugin</h2>
<div class="api-docs-basics">
    <p>
        Provision the plugin to integrate it with plentymarkets.
    </p>
    <ol>
        <li>
            Go to <b>Plugins » Plugin overview</b>.
        </li>
        <li>
            In the row of your plugin, click on <b>Select client</b>.
        </li>
        <li>
            Select your client and save it.
        </li>
        <li>
            Activate the plugin in the <b>Productive</b> column.
        </li>
        <li>
            In the toolbar, click on <b>Provision plugins in Productive</b>.<br />
            &rarr; Once a success message is displayed, we are ready to check the output.
        </li>
    </ol>
</div>

<h1 id="open-plugin">Reaping the rewards</h1>
<div class="api-docs-basics">
    <p>
        Finally, open a new browser tab and type in your domain adding <code>/hello</code> at the end. And there it is, your first plugin.
    </p>
    <figure>
        <a data-toggle="modal" data-target="#modal2" href="#">
        <img class="img-responsive img-pretty" src="{{ plugin_path('PlentyPluginShowcase') }}/images/tutorials/helloworld.png" />
        </a>
    </figure>
</div>
<div class="alert alert-info" role="alert">
    <b>Info</b>: Once you have changed the files in your local <code>HelloWorld</code> folder, the changes must be pushed to GitHub. You also have to update the plugin in your plentymarkets inbox by pulling the changes from GitHub. Finally, you have to provision the plugin again to display the changes in your browser.
</div>

<!-- Modal -->
<div class="modal fade" id="modal2" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog img-horizontal" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">My first plugin</h4>
            </div>
            <div class="modal-body">
                <figure>
                    <img class="img-responsive" src="{{ plugin_path('PlentyPluginShowcase') }}/images/tutorials/helloworld.png" />
                </figure>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

{% endblock %}
